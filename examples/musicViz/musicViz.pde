import peasy.test.*;
import peasy.org.apache.commons.math.*;
import peasy.*;
import peasy.org.apache.commons.math.geometry.*;

/**
  * This sketch demonstrates how to use an FFT to analyze
  * the audio being generated by an AudioPlayer.
  * <p>
  * FFT stands for Fast Fourier Transform, which is a 
  * method of analyzing audio that allows you to visualize 
  * the frequency content of a signal. You've seen 
  * visualizations like this before in music players 
  * and car stereos.
  * <p>
  * For more information about Minim and additional features, 
  * visit http://code.compartmental.net/minim/
  */

import ddf.minim.analysis.*;
import ddf.minim.*;

//declare dragable 3d camera
PeasyCam cam;

//variables for music analysis
Minim       minim;
AudioPlayer jingle;
FFT         fft;

//variables for visual
int seed = 0;
float[] startRotations = new float[100];
float[] arcRotations = new float[100];
float[] radiuses = new float[100];
color[] colors = new color[100];

void setup()
{
  size(800, 800, P3D);
  
  //initalize our PeasyCam object cam
  cam = new PeasyCam(this, 100);
  cam.setMinimumDistance(200);
  cam.setMaximumDistance(5000);
  
  minim = new Minim(this);
  
  //set up for fft analysis
  jingle = minim.loadFile("hello.mp3", 1024);
  jingle.loop();
  fft = new FFT( jingle.bufferSize(), jingle.sampleRate() );
  
  //setup for visual
  noFill();
  for(int i=0; i<100; i++){
    //generate different shades of purples 
    //by omitting the green compoent of rgb value code.
    //generate each starting angel for each of the 100 archs
    startRotations[i] = random(0, PI*2);
    //generate each length(defined by angle) for each of the 100 archs
    arcRotations[i] = random(0, PI*2);
    //populate each raidus for each of the 100 arches
    radiuses[i] = map(noise(seed), 0, 1, 100, 800);
    //generate color code for each of the 100 archs
    colors[i]=color(random(4, 255), 0, random(4, 255));
    seed+=1;
  }
  
}

void draw()
{
//  background(0);
//  stroke(255);
  //fill background with a semi-transparent box, with our arcs sitting inside the center of the box
  noStroke();
  fill(0, 4);
  box(3000);
  // perform a forward FFT on the samples in jingle's mix buffer,
  // which contains the mix of both the left and right channels of the file
  fft.forward( jingle.mix );
  
//  for(int i = 0; i < fft.specSize(); i++)
//  {
//    // draw the line for frequency band i, scaling it up a bit so we can see it
//    line( i, height, i, height - fft.getBand(i)*8 );
//  }
    for(int i=0; i<100; i++){
    pushMatrix();
     if (fft.getBand(i)>20 &&fft.getBand(i) < 50) {
      strokeWeight(5);
    } else if (fft.getBand(i)>=50) {
      strokeWeight(15);
    } else {
      strokeWeight(1);
    }
//    strokeWeight(10);
    //no fill color;
    noFill();
    stroke(colors[i]);
    //put 5 pixels in between the z location of each pair of adjecent arcs
    //move the entire arrangement back by half of its length along the z axis
    translate(0, 0, 100*5/2 - i*5);
    rotate(startRotations[i]);
    arc(0, 0, radiuses[i], radiuses[i], 0, map(fft.getBand(i), 0, 100, 0, PI*2));
    popMatrix();
  }
  
    //center sphere
    pushMatrix();
    fill(255, 255, 0);
    noStroke();
    sphere(fft.getBand(3)/2);
    popMatrix();
}
